= Rosetta Queue

Rosetta Queue is a messaging gateway API with adapters for many messaging systems available in Ruby. Messaging systems can be easily switched out with a small configuration change. Code for testing on the object and application level is also provided.

The adapters provided currently are for stomp, and amqp.  We would like to add adapters for beanstalk and other messaging gateways.  The stomp adapter has been used in production along side with Apache's ActiveMQ.  The amqp adapter currently works along side RabbitMQ and passes the acceptance tests but as of yet has not been used in production.

== How to contribute
----------------------------------------------------------------
Gems you will need:
cucumber, rspec, yaml, stomp, tmm1-amqp

You should be able to run the rspec code examples (specs) without any brokers running with autospec or 'rake spec'.

To run the cucumber features you will need the a messaging system setup that can speak stomp and AMQP.  We have been using the following brokers in testing:

=== Apache ActiveMQ (for the stomp adapter)
Go to http://activemq.apache.org/download.html to download the latest version, and see http://activemq.apache.org/getting-started.html for installation and configuration instructions.
The stomp client and features should work with ApacheMQ out of the box.  If you are running any ApacheMQ servers in production on your network you will want to disable the multicast autodiscovery in conf/activemq.xml.  (Around lines 56 and 98.)

=== RabbitMQ (for the amqp adapter)
Download the right tar from here: http://www.rabbitmq.com/download.html and follow the installation directions that comes with it.
The features rely on a user of 'rosetta' being setup with the password of 'password' and added to the default virtualhost. You can set them up like so:

rabbitmqctl add_user rosetta password
rabbitmqctl map_user_vhost rosetta /


== Consumers and Producers
First, you will need to set up a destination to produce messages to and consume messages from.

RosettaQueue::Destinations.define do |queue|
  queue.map :test_queue, '/queue/my_test_queue'
end

TODO.. write new docs for using consumers, producers, filters, etcs.... For now please look around in the code and check out the features for simple examples.

